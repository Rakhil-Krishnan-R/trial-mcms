// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/types.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
}


// Validate ../../app/admin/competitions/[id]/assign/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/admin/competitions/[id]/assign">> = Specific
  const handler = {} as typeof import("../../app/admin/competitions/[id]/assign/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/admin/competitions/[id]/awards/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/admin/competitions/[id]/awards">> = Specific
  const handler = {} as typeof import("../../app/admin/competitions/[id]/awards/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/admin/competitions/[id]/live/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/admin/competitions/[id]/live">> = Specific
  const handler = {} as typeof import("../../app/admin/competitions/[id]/live/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/admin/competitions/[id]/manage/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/admin/competitions/[id]/manage">> = Specific
  const handler = {} as typeof import("../../app/admin/competitions/[id]/manage/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/admin/competitions/[id]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/admin/competitions/[id]">> = Specific
  const handler = {} as typeof import("../../app/admin/competitions/[id]/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/admin/competitions/[id]/teams/[teamId]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/admin/competitions/[id]/teams/[teamId]">> = Specific
  const handler = {} as typeof import("../../app/admin/competitions/[id]/teams/[teamId]/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/admin/competitions/[id]/teams/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/admin/competitions/[id]/teams">> = Specific
  const handler = {} as typeof import("../../app/admin/competitions/[id]/teams/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/admin/competitions/[id]/tiebreakers/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/admin/competitions/[id]/tiebreakers">> = Specific
  const handler = {} as typeof import("../../app/admin/competitions/[id]/tiebreakers/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/admin/competitions/new/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/admin/competitions/new">> = Specific
  const handler = {} as typeof import("../../app/admin/competitions/new/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/admin/competitions/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/admin/competitions">> = Specific
  const handler = {} as typeof import("../../app/admin/competitions/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/admin/login/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/admin/login">> = Specific
  const handler = {} as typeof import("../../app/admin/login/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/admin/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/admin">> = Specific
  const handler = {} as typeof import("../../app/admin/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/admin/register/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/admin/register">> = Specific
  const handler = {} as typeof import("../../app/admin/register/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/judge/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/judge">> = Specific
  const handler = {} as typeof import("../../app/judge/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/judge/scoresheet/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/judge/scoresheet">> = Specific
  const handler = {} as typeof import("../../app/judge/scoresheet/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/judge/thanks/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/judge/thanks">> = Specific
  const handler = {} as typeof import("../../app/judge/thanks/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/manager/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/manager">> = Specific
  const handler = {} as typeof import("../../app/manager/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/manager/timer/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/manager/timer">> = Specific
  const handler = {} as typeof import("../../app/manager/timer/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/">> = Specific
  const handler = {} as typeof import("../../app/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/admin/login/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/admin/login">> = Specific
  const handler = {} as typeof import("../../app/api/admin/login/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/admin/register/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/admin/register">> = Specific
  const handler = {} as typeof import("../../app/api/admin/register/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/competitions/[id]/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/competitions/[id]">> = Specific
  const handler = {} as typeof import("../../app/api/competitions/[id]/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/competitions/[id]/teams/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/competitions/[id]/teams">> = Specific
  const handler = {} as typeof import("../../app/api/competitions/[id]/teams/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/competitions/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/competitions">> = Specific
  const handler = {} as typeof import("../../app/api/competitions/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/courts/[id]/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/courts/[id]">> = Specific
  const handler = {} as typeof import("../../app/api/courts/[id]/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/courts/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/courts">> = Specific
  const handler = {} as typeof import("../../app/api/courts/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/judge/login/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/judge/login">> = Specific
  const handler = {} as typeof import("../../app/api/judge/login/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/judge/meta/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/judge/meta">> = Specific
  const handler = {} as typeof import("../../app/api/judge/meta/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/judge/submit/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/judge/submit">> = Specific
  const handler = {} as typeof import("../../app/api/judge/submit/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/live/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/live">> = Specific
  const handler = {} as typeof import("../../app/api/live/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/manager/login/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/manager/login">> = Specific
  const handler = {} as typeof import("../../app/api/manager/login/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/manager/submit/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/manager/submit">> = Specific
  const handler = {} as typeof import("../../app/api/manager/submit/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/reports/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/reports">> = Specific
  const handler = {} as typeof import("../../app/api/reports/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/results/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/results">> = Specific
  const handler = {} as typeof import("../../app/api/results/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/results/tiebreak/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/results/tiebreak">> = Specific
  const handler = {} as typeof import("../../app/api/results/tiebreak/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/teams/[id]/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/teams/[id]">> = Specific
  const handler = {} as typeof import("../../app/api/teams/[id]/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/teams/[id]/tiebreaker/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/teams/[id]/tiebreaker">> = Specific
  const handler = {} as typeof import("../../app/api/teams/[id]/tiebreaker/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/teams/autogen/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/teams/autogen">> = Specific
  const handler = {} as typeof import("../../app/api/teams/autogen/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}





// Validate ../../app/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/">> = Specific
  const handler = {} as typeof import("../../app/layout.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}
